plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group = 'me.jerry.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springBootAdminVersion', '2.1.6')
    set('springCloudVersion', "Hoxton.RC2")
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // implementation 'org.springframework.boot:spring-boot-starter-cache'
    runtimeOnly('org.springframework.boot:spring-boot-starter-actuator')
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'

    // hazelcast
    implementation 'com.hazelcast:hazelcast'
    implementation 'com.hazelcast:hazelcast-spring'
    implementation 'com.hazelcast:hazelcast-client'

    // implementation 'javax.cache:cache-api'

    // eureka client
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')

    // slueth
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth')

    // spring boot admin client
    implementation('de.codecentric:spring-boot-admin-starter-client')

    // micrometer
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}


test {
    useJUnitPlatform()
}
